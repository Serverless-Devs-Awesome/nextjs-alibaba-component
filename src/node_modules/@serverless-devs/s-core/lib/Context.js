"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require('path');
var os = require('os');
var fs = require('fs');
var utils_1 = require("./utils");
var Context = /** @class */ (function () {
    function Context(context) {
        if (context === void 0) { context = {}; }
        this.credentials = {};
        var stateFileRoot = context.stateFileRoot, componentPathRoot = context.componentPathRoot;
        var currentSDir = path.join(process.cwd(), '.s');
        this.componentPathRoot = componentPathRoot ? path.resolve(componentPathRoot) : path.join(os.homedir(), '.s', 'components');
        if (!stateFileRoot && !fs.existsSync(currentSDir)) {
            fs.mkdirSync(currentSDir);
        }
        this.stateFileRoot = stateFileRoot ? path.resolve(stateFileRoot) : currentSDir;
        this.credentials = context.credentials || {};
        this.id = utils_1.generateId();
        this.state = { id: this.id };
    }
    Context.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var contextStatePath;
            return __generator(this, function (_a) {
                contextStatePath = path.join(this.stateFileRoot, "identify_.json");
                if (fs.existsSync(contextStatePath)) {
                    this.state = utils_1.readJsonFile(contextStatePath);
                }
                else {
                    utils_1.writeJsonFile(contextStatePath, this.state);
                }
                this.id = this.state.id;
                return [2 /*return*/];
            });
        });
    };
    Context.prototype.getState = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var stateFilePath, result;
            return __generator(this, function (_a) {
                stateFilePath = path.join(this.stateFileRoot, id + ".json");
                result = {};
                if (fs.existsSync(stateFilePath)) {
                    result = utils_1.readJsonFile(stateFilePath);
                }
                return [2 /*return*/, result];
            });
        });
    };
    Context.prototype.setState = function (id, state) {
        return __awaiter(this, void 0, void 0, function () {
            var stateFilePath;
            return __generator(this, function (_a) {
                stateFilePath = path.join(this.stateFileRoot, id + ".json");
                if (!fs.existsSync(stateFilePath)) {
                    fs.openSync(stateFilePath, 'w');
                }
                fs.writeFileSync(stateFilePath, JSON.stringify(state, null, 2), 'utf-8');
                return [2 /*return*/, state];
            });
        });
    };
    Context.prototype.log = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Context.prototype.status = function () {
    };
    Context.prototype.sleep = function (ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    };
    Context.prototype.args2Json = function (args) {
        var argsData = {};
        if (args) {
            var tempList = args.split(' ');
            var temp = void 0;
            for (var i = 0; i < tempList.length; i++) {
                if (tempList[i].startsWith('-')) {
                    var tempArgs = tempList[i].startsWith('--')
                        ? tempList[i].slice(2, tempList[i].length)
                        : tempList[i].slice(1, tempList[i].length);
                    argsData[tempArgs] = undefined;
                    temp = tempArgs;
                }
                else {
                    if (temp) {
                        argsData[temp] = tempList[i];
                        temp = undefined;
                    }
                }
            }
        }
        return argsData;
    };
    return Context;
}());
exports.default = Context;
//# sourceMappingURL=Context.js.map